import asyncio
import logging
import httpx
import json
from aiogram import Bot
from aiogram.types import InputMediaPhoto
from dotenv import load_dotenv
load_dotenv()
import config

logger = logging.getLogger(__name__)

# –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
async def upload_photo_to_vk(bot: Bot, file_id: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–µ–Ω—É –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ Telegram
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{config.TELEGRAM_TOKEN}/{file_info.file_path}"
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with httpx.AsyncClient(timeout=httpx.Timeout(timeout=10.0)) as client:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–µ–Ω—ã –≥—Ä—É–ø–ø—ã - –ø–µ—Ä–µ–¥–∞–µ–º group_id –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
            response = await client.get(
                "https://api.vk.com/method/photos.getWallUploadServer",
                params={
                    'group_id': config.VK_GROUP_ID,
                    'access_token': config.VK_USER_TOKEN,
                    'v': '5.131'
                },
                timeout=httpx.Timeout(timeout=10.0),
                headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
            )
            try:
                upload_data = response.json()
            except json.JSONDecodeError:
                logger.error(f"Failed to decode JSON response from VK API: {response.text}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            if 'error' in upload_data:
                error = upload_data['error']
                error_code = error.get('error_code', 'Unknown')
                error_msg = error.get('error_msg', 'Unknown error')
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 214 (Access to adding post denied)
                if error_code == 214:
                    logger.error(f"VK API error 214 getting wall upload server: Access to adding post denied. "
                               f"–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞ —Å—Ç–µ–Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                               f"–ü—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è:\n"
                               f"1. ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ —Ç–æ–∫–µ–Ω —Å–∞–º–æ–π –≥—Ä—É–ø–ø—ã\n"
                               f"2. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã ‚Üí '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º' –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
                               f"3. üë§ –ü—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞: –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã\n"
                               f"4. üåê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–∫–ª—é—á–∞—è owner_id –≥—Ä—É–ø–ø—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '-' (–Ω–∞–ø—Ä–∏–º–µ—Ä, -ID –≥—Ä—É–ø–ø—ã)\n"
                               f"5. ‚è≥ –õ–∏–º–∏—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π: –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ª–∏–º–∏—Ç–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π\n\n"
                               f"‚úÖ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ —Ç–æ–∫–µ–Ω —Å–∞–º–æ–π –≥—Ä—É–ø–ø—ã. "
                               f"–¢–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã. "
                               f"Error details: {error_msg}")
                else:
                    logger.error(f"VK API error getting wall upload server: {error_code} - {error_msg}")
                return None
            
            if 'response' not in upload_data or 'upload_url' not in upload_data['response']:
                logger.error(f"Missing upload_url in response: {upload_data}")
                return None
            
            upload_url = upload_data['response']['upload_url']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Å Telegram
            file_response = await client.get(file_url, timeout=httpx.Timeout(timeout=30.0), headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"})
            files = {'photo': ('photo.jpg', file_response.content)}
            upload_response = await client.post(upload_url, files=files, timeout=httpx.Timeout(timeout=30.0), headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"})
            try:
                photo_data = upload_response.json()
            except json.JSONDecodeError:
                logger.error(f"Failed to decode JSON response from VK upload: {upload_response.text}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            if 'photo' not in photo_data or 'server' not in photo_data or 'hash' not in photo_data:
                logger.error(f"Missing required fields in photo upload response: {photo_data}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ photo –Ω–µ –ø—É—Å—Ç–æ–µ
            if not photo_data.get('photo'):
                logger.error(f"Photo parameter is empty in upload response: {photo_data}")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–µ–Ω–µ –≥—Ä—É–ø–ø—ã - –¥–æ–±–∞–≤–ª—è–µ–º group_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            save_response = await client.post(
                "https://api.vk.com/method/photos.saveWallPhoto",
                data={
                    'group_id': config.VK_GROUP_ID,
                    'photo': photo_data['photo'],
                    'server': photo_data['server'],
                    'hash': photo_data['hash'],
                    'access_token': config.VK_USER_TOKEN,
                    'v': '5.131'
                },
                timeout=httpx.Timeout(timeout=30.0),
                headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
            )
            try:
                saved_data = save_response.json()
            except json.JSONDecodeError:
                logger.error(f"Failed to decode JSON response from VK save: {save_response.text}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            if 'error' in saved_data:
                logger.error(f"VK API error saving wall photo: {saved_data['error']}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å response –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            if 'response' not in saved_data or not saved_data['response']:
                logger.error(f"Empty response when saving wall photo: {saved_data}")
                return None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "photo{owner_id}_{id}"
            photo = saved_data['response'][0]
            owner_id = photo['owner_id']
            media_id = photo['id']
            
            return f"photo{int(owner_id)}_{int(media_id)}"
            
    except Exception as e:
        logger.error(f"Failed to upload photo to VK wall: {e}", exc_info=False)
        return None

async def check_vk_token_permissions(access_token: str, group_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã"""
    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(timeout=15.0)) as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞
            response = await client.get(
                "https://api.vk.com/method/account.getProfileInfo",
                params={
                    'access_token': access_token,
                    'v': '5.131'
                },
                timeout=httpx.Timeout(timeout=15.0),
                headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
            )
            try:
                result = response.json()
            except json.JSONDecodeError:
                logger.error(f"Failed to decode JSON response from VK token check: {response.text}")
                return False
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–∫–µ–Ω–æ–º –≥—Ä—É–ø–ø—ã
            if 'error' in result:
                error_code = result['error'].get('error_code', 0)
                # –û—à–∏–±–∫–∞ 5 (Authorization failed) –∏–ª–∏ 15 (Access denied) –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Ç–æ–∫–µ–Ω –≥—Ä—É–ø–ø—ã
                if error_code in [5, 15]:
                    # –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
                    group_response = await client.get(
                        "https://api.vk.com/method/groups.getById",
                        params={
                            'group_id': group_id,
                            'access_token': access_token,
                            'v': '5.131'
                        },
                        timeout=httpx.Timeout(timeout=15.0),
                        headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
                    )
                    try:
                        group_result = group_response.json()
                    except json.JSONDecodeError:
                        logger.error(f"Failed to decode JSON response from VK group check: {group_response.text}")
                        return False
                    
                    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—É—á–µ–Ω–∞, —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
                    if 'response' in group_result:
                        return True
            
            return 'response' in result
    except Exception as e:
        logger.error(f"Failed to check VK token permissions: {e}")
        return False

async def check_vk_user_token_permissions(access_token: str, group_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(timeout=15.0)) as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
            response = await client.get(
                "https://api.vk.com/method/groups.getById",
                params={
                    'group_id': group_id,
                    'access_token': access_token,
                    'v': '5.131',
                    'fields': 'is_admin'
                },
                timeout=httpx.Timeout(timeout=15.0),
                headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
            )
            try:
                result = response.json()
            except json.JSONDecodeError:
                logger.error(f"Failed to decode JSON response from VK user token check: {response.text}")
                return False
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
            if 'error' in result:
                error_code = result['error'].get('error_code', 0)
                error_msg = result['error'].get('error_msg', 'Unknown error')
                logger.error(f"VK API error checking user token permissions: {error_code} - {error_msg}")
                return False
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—É—á–µ–Ω–∞, —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
            if 'response' in result and result['response']:
                group_info = result['response'][0]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
                if group_info.get('is_admin', 0) == 1:
                    return True
                else:
                    logger.warning(f"User is not admin of the group: {group_info}")
                    return False
            
            return False
    except Exception as e:
        logger.error(f"Failed to check VK user token permissions: {e}")
        return False

async def publish_vk_post(bot: Bot, text: str, photo_ids: list[str] | None = None):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ —Å—Ç–µ–Ω–µ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º –ø–æ—Å—Ç–æ–º)"""
    if not config.VK_USER_TOKEN:
        logger.warning("VK user token is not configured. Skipping VK publication.")
        return False

    # –ï—Å–ª–∏ VK_GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω —á–∏—Å–ª–æ–º, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ screen_name
    group_id = config.VK_GROUP_ID
    if not group_id or int(group_id) == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ group_id –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —Ä–∞–≤–µ–Ω 0
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã –ø–æ screen_name –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        vk_group_screen_name = os.getenv('VK_GROUP_SCREEN_NAME')
        if vk_group_screen_name:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ vk_publisher
            try:
                from vk_publisher import get_group_id_by_screen_name
                group_id = await get_group_id_by_screen_name(vk_group_screen_name, config.VK_USER_TOKEN)
                if not group_id:
                    logger.error("Could not resolve group ID by screen name. Skipping VK publication.")
                    return False
            except ImportError:
                logger.error("vk_publisher module not found. Skipping VK publication.")
                return False
        else:
            logger.error("Neither VK_GROUP_ID nor VK_GROUP_SCREEN_NAME is configured. Skipping VK publication.")
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    if not await check_vk_user_token_permissions(config.VK_USER_TOKEN, str(group_id)):
        logger.error("VK user token does not have permission to post as the group. "
                   "This may indicate that the user token doesn't have admin rights for the group. "
                   "Consider using a user token with admin rights for the group. "
                   "Error details: User token permissions check failed")
        return False

    if photo_ids is None:
        photo_ids = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–µ–Ω—É –≥—Ä—É–ø–ø—ã
    attachments = []
    if photo_ids:
        for file_id in photo_ids:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ vk_publisher –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É
            try:
                from vk_publisher import upload_photo_to_vk_wall
                vk_photo_id = await upload_photo_to_vk_wall(bot, file_id)
                if vk_photo_id:
                    attachments.append(vk_photo_id)
            except ImportError:
                logger.error("vk_publisher module not found. Cannot upload photos to VK.")
                return False
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            await asyncio.sleep(0.5)
    
    # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω–µ –≥—Ä—É–ø–ø—ã
    post_params = {
        'owner_id': -int(group_id),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø—ã
        'from_group': 1,  # –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
        'message': text,
        'attachments': ",".join(attachments) if attachments else "",  # –§–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "photo{owner_id}_{id}"
        'access_token': config.VK_USER_TOKEN,
        'v': '5.131'
    }
    
    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(timeout=15.0)) as client:
            response = await client.post(
                "https://api.vk.com/method/wall.post",
                data=post_params,
                timeout=httpx.Timeout(timeout=15.0),
                headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
            )
            try:
                result = response.json()
            except json.JSONDecodeError:
                logger.error(f"Failed to decode JSON response from VK wall.post: {response.text}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            if 'error' in result:
                error = result['error']
                error_code = error.get('error_code', 'Unknown')
                error_msg = error.get('error_msg', 'Unknown error')
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 214 (Access to adding post denied)
                if error_code == 214:
                    logger.error(f"VK API error 214: Access to adding post denied. "
                               f"–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞ —Å—Ç–µ–Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                               f"–ü—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è:\n"
                               f"1. ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ —Ç–æ–∫–µ–Ω —Å–∞–º–æ–π –≥—Ä—É–ø–ø—ã\n"
                               f"2. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã ‚Üí '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º' –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
                               f"3. üë§ –ü—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞: –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã\n"
                               f"4. üåê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–∫–ª—é—á–∞—è owner_id –≥—Ä—É–ø–ø—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '-' (–Ω–∞–ø—Ä–∏–º–µ—Ä, -ID –≥—Ä—É–ø–ø—ã)\n"
                               f"5. ‚è≥ –õ–∏–º–∏—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π: –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ª–∏–º–∏—Ç–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π\n\n"
                               f"‚úÖ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ —Ç–æ–∫–µ–Ω —Å–∞–º–æ–π –≥—Ä—É–ø–ø—ã. "
                               f"–¢–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã. "
                               f"Error details: {error_msg}")
                elif error_code == 27:  # Group authorization failed
                    logger.error(f"VK API error 27: Group authorization failed. "
                               f"–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –≥—Ä—É–ø–ø—ã –≤–º–µ—Å—Ç–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
                               f"Error details: {error_msg}")
                else:
                    logger.error(f"VK API error posting to wall: {error_code} - {error_msg}")
                
                return False
            
            logger.info("Successfully posted to VK wall.")
            return True
            
    except Exception as e:
        logger.error(f"Failed to post to VK wall: {e}", exc_info=False)
        return False

async def publish_telegram_post(bot: Bot, text: str, media_group: list[InputMediaPhoto] | None = None):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª"""
    if not config.TELEGRAM_CHANNEL_ID:
        logger.error("TELEGRAM_CHANNEL_ID is not configured")
        return
        
    logger.info(f"Executing Telegram post to channel {config.TELEGRAM_CHANNEL_ID}")
    try:
        if not media_group:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –∑–∞–¥–∞–Ω –∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            if config.TELEGRAM_CHANNEL_ID and config.TELEGRAM_CHANNEL_ID != "":
                await asyncio.wait_for(bot.send_message(config.TELEGRAM_CHANNEL_ID, text), timeout=15)
            return

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–¥–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
        if media_group:
            # –ú–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞ –≤ caption
            media_group[0].caption = text[:1024]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –∑–∞–¥–∞–Ω –∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            if config.TELEGRAM_CHANNEL_ID and config.TELEGRAM_CHANNEL_ID != "":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.wait_for –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
                await asyncio.wait_for(bot.send_media_group(config.TELEGRAM_CHANNEL_ID, list(media_group)), timeout=15)
        logger.info("Successfully sent post to Telegram.")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if media_group:
            media_group.clear()
    except asyncio.TimeoutError:
        logger.error("Timeout during sending post to Telegram")
    except Exception as e:
        logger.error(f"Failed to send post to Telegram: {e}", exc_info=False)  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é publish_vk_post, —Ç–∞–∫ –∫–∞–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –í–ö –Ω—É–∂–Ω–∞