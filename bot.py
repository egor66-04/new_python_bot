# 1. –°–Ω–∞—á–∞–ª–∞ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ .env
from dotenv import load_dotenv
load_dotenv()

# 2. –¢–µ–ø–µ—Ä—å ‚Äî –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InaccessibleMessage
from aiogram.utils.keyboard import InlineKeyboardBuilder
# from aiogram.filters import Text  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ aiogram

import config
from content_generator import generate_post_text
from publisher import publish_telegram_post, publish_vk_post

from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
logger = logging.getLogger(__name__)

def get_current_season() -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ø–æ –º–µ—Å—è—Ü—É"""
    month = datetime.now().month
    
    if month in [12, 1, 2]:
        return "–∑–∏–º–∞"
    elif month in [3, 4, 5]:
        return "–≤–µ—Å–Ω–∞"
    elif month in [6, 7, 8]:
        return "–ª–µ—Ç–æ"
    else:
        return "–æ—Å–µ–Ω—å"

print("üîß DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", config.TELEGRAM_TOKEN[:10] + "..." if config.TELEGRAM_TOKEN else "None")
print("üîß DEBUG: ADMIN_ID:", config.ADMIN_ID)
if not config.TELEGRAM_TOKEN:
    raise ValueError("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –ø—É—Å—Ç! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞.")
else:
    print("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=config.TELEGRAM_TOKEN,  # –£–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    # request_timeout –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ aiogram 3.x
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
publish_semaphore = asyncio.Semaphore(2)

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ - —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PostStates(StatesGroup):
    generating = State()
    waiting_for_photos = State()
    ready_to_publish = State()
    editing_post = State()
    waiting_for_topic = State()

# –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥
# –í–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫, –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: Message):
    if message.from_user and str(message.from_user.id) != str(config.ADMIN_ID):
        return
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø SMM-–ø–æ–º–æ—â–Ω–∏–∫ –í–∞–ª–µ—Ä–∏–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    max_retries = 2
    retry_count = 0
    
    while retry_count <= max_retries:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∞ –Ω–µ InaccessibleMessage)
            if callback.message and not isinstance(callback.message, InaccessibleMessage) and getattr(callback.message, "message_id", None):
                await callback.message.edit_text(text, reply_markup=reply_markup)
                return  # –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                await callback.answer(text[:199] if len(text) > 199 else text, show_alert=True) # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–ª—è show_alert
                return  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç
        except Exception as e:
            retry_count += 1
            if retry_count > max_retries:
                await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)[:19] if len(str(e)) > 199 else str(e)}", show_alert=True)
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                logger.warning(f"Error in safe_edit_message after {max_retries + 1} attempts: {e}")  # –ò–∑–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ warning
                return
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(0.5)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
# –í–æ–∑–≤—Ä–∞—â–∞–µ–º F.data == "..." —Ç–∞–∫ –∫–∞–∫ Text —Ñ–∏–ª—å—Ç—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ aiogram
@dp.callback_query(F.data == "generate_post")
async def generate_post_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    if await state.get_state() == PostStates.generating:
        await callback.answer("–ü–æ–¥–æ–∂–¥–∏, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞...")
        return
    await state.set_state(PostStates.generating)
    
    await safe_edit_message(callback, "üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç...")
    
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
    template_key = random.choice(list(config.POST_TEMPLATES.keys()))
    template_text = config.POST_TEMPLATES[template_key]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    if template_key in ["pedicure_work", "seasonal_special", "client_feedback"]:
        service_type = "pedicure"
    else:
        service_type = "manicure_pedicure"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ –∫ —à–∞–±–ª–æ–Ω—É
    prompt_with_contact = f"{template_text}\n\n–í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n\n{config.CONTACT_BLOCK}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
    post_text = await generate_post_text(prompt_with_contact, service_type)
    
    if post_text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(generated_post=post_text, photos=[], current_template=template_key)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
        
        await safe_edit_message(callback, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.callback_query(F.data == "generate_topic_post")
async def generate_topic_post_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(PostStates.waiting_for_topic)
    await safe_edit_message(callback, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è —Ç–µ–º–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –º–∞–Ω–∏–∫—é—Ä–æ–º, –ø–µ–¥–∏–∫—é—Ä–æ–º –∏–ª–∏ —É—Ö–æ–¥–æ–º –∑–∞ –Ω–æ–≥—Ç—è–º–∏." + "\n\n" + "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ó–∏–º–Ω–∏–µ –¥–∏–∑–∞–π–Ω—ã –Ω–æ–≥—Ç–µ–π', '–ü–µ–¥–∏–∫—é—Ä –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤', '–£—Ö–æ–¥ –∑–∞ –Ω–æ–≥—Ç—è–º–∏ –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö'")


@dp.message(PostStates.waiting_for_topic, F.text)
async def process_topic_text(message: Message, state: FSMContext):
    topic = message.text.strip() if message.text else ""
    
    if not topic:
        await message.answer("–¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–º—É –ø–æ—Å—Ç–∞ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.set_state(PostStates.generating)
    await message.answer(f"–ü—Ä–∏–Ω—è–ª —Ç–µ–º—É: '{topic}'. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω, –∞–¥–∞–ø—Ç–∏—Ä—É—è –µ–≥–æ –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É
    season = get_current_season() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞
    template_text = (
        f"–¢—ã ‚Äî –í–∞–ª–µ—Ä–∏—è, –º–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ –∏ –ø–µ–¥–∏–∫—é—Ä–∞ –∏–∑ –°–∞–º–∞—Ä—ã. –¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∂–∏–≤–æ–π –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π. "
        f"–ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: '{topic}'. "
        f"–£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è –≥–æ–¥–∞: —Å–µ–π—á–∞—Å {season}. "
        f"–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–¥—Ä—É–≥–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π 1-2 —É–º–µ—Å—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üíñ, ‚ú®, üíÖ, üî•). "
        f"–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ engaging. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∫—É—Ä—Å–∏–≤). "
        f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî –æ–∫–æ–ª–æ 300-500 —Å–∏–º–≤–æ–ª–æ–≤."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
    post_text = await generate_post_text(template_text, "manicure_pedicure")
    
    if post_text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ —Ç–µ–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(generated_post=post_text, photos=[], current_template="topic_based", topic=topic)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post_topic")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
        
        await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{topic}':\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." + "\n\n" + "–ü—Ä–∏—à–ª–∏ —Ç–µ–º—É –ø–æ—Å—Ç–∞ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query(F.data == "generate_pedicure_post")
async def generate_pedicure_post_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    if await state.get_state() == PostStates.generating:
        await callback.answer("–ü–æ–¥–æ–∂–¥–∏, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞...")
        return
    await state.set_state(PostStates.generating)
    
    await safe_edit_message(callback, "üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –æ –ø–µ–¥–∏–∫—é—Ä–µ...")
    
    # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –ø–µ–¥–∏–∫—é—Ä–∞
    template_key = "pedicure_work"
    template_text = config.POST_TEMPLATES[template_key]
    service_type = "pedicure"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ –∫ —à–∞–±–ª–æ–Ω—É
    prompt_with_contact = f"{template_text}\n\n–í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n\n{config.CONTACT_BLOCK}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
    post_text = await generate_post_text(prompt_with_contact, service_type)
    
    if post_text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(generated_post=post_text, photos=[], current_template=template_key)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
        
        await safe_edit_message(callback, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –æ –ø–µ–¥–∏–∫—é—Ä–µ:\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ –ø–µ–¥–∏–∫—é—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –ø–æ—Å—Ç–æ–≤
def get_post_type_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ö—Ä–∞—Å–∏–≤–∞—è —Ä–∞–±–æ—Ç–∞", callback_data="template_beautiful_work")
    builder.button(text="–õ–∞–π—Ñ—Å—Ç–∞–π–ª", callback_data="template_lifestyle")
    builder.button(text="–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ—Å—Ç", callback_data="template_useful_post")
    builder.button(text="–ö—Ä–∞—Å–∏–≤—ã–π –ø–µ–¥–∏–∫—é—Ä", callback_data="template_pedicure_work")
    builder.button(text="–°–µ–∑–æ–Ω–Ω–∞—è —Ç–µ–º–∞", callback_data="template_seasonal_special")
    builder.button(text="–û—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="template_client_feedback")
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
@dp.callback_query(F.data.startswith("template_"))
async def handle_template_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    if callback.data:
        template_key = callback.data.replace("template_", "")
    else:
        await safe_edit_message(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–∞
    template_text = config.POST_TEMPLATES.get(template_key)
    if not template_text:
        await safe_edit_message(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    if template_key in ["pedicure_work", "seasonal_special", "client_feedback"]:
        service_type = "pedicure"
    else:
        service_type = "manicure_pedicure"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ –∫ —à–∞–±–ª–æ–Ω—É
    prompt_with_contact = f"{template_text}\n\n–í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n\n{config.CONTACT_BLOCK}"
    
    await safe_edit_message(callback, "üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
    post_text = await generate_post_text(prompt_with_contact, service_type)
    
    if post_text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(generated_post=post_text, photos=[], current_template=template_key)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
        
        await safe_edit_message(callback, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(F.data == "regenerate_post")
async def regenerate_post_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_template = data.get('current_template', 'beautiful_work')
    template_text = config.POST_TEMPLATES.get(current_template)
    if not template_text:
        await safe_edit_message(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    if current_template in ["pedicure_work", "seasonal_special", "client_feedback"]:
        service_type = "pedicure"
    else:
        service_type = "manicure_pedicure"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ –∫ —à–∞–±–ª–æ–Ω—É
    prompt_with_contact = f"{template_text}\n\n–í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n\n{config.CONTACT_BLOCK}"
    
    await safe_edit_message(callback, "üí≠ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
    post_text = await generate_post_text(prompt_with_contact, service_type)
    
    if post_text:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(generated_post=post_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
        
        await safe_edit_message(callback, f"–ù–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(F.data == "add_photo")
async def add_photo_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await safe_edit_message(callback, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).")
    await state.set_state(PostStates.waiting_for_photos)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@dp.message(PostStates.waiting_for_photos, F.photo)
async def photo_handler(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photos = data.get('photos', [])
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤ Telegram (10) –∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    max_photos_for_telegram = min(10, config.MAX_PHOTOS_PER_POST)
    if len(photos) >= max_photos_for_telegram:
        await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –ø–æ—Å—Ç–µ: {max_photos_for_telegram}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    if message.photo and len(message.photo) > 0:
        photo_id = message.photo[-1].file_id
        file_info = await bot.get_file(photo_id)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        # if file_info.file_size and file_info.file_size > config.MAX_PHOTO_SIZE_MB * 1024 * 1024:
        #     await message.answer(f"–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_PHOTO_SIZE_MB} –ú–ë")
        #     return
        
        photos.append(photo_id)
    else:
        await message.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Ñ–æ—Ç–æ
    await state.update_data(photos=photos)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ, –≤—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", callback_data="photos_done")
    builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="add_more_photos")
    
    await message.answer(
        f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "photos_done")
async def photos_done_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –∏ —Ñ–æ—Ç–æ
    data = await state.get_data()
    post_text = data.get('generated_post')
    photos = data.get('photos', [])
    
    if not post_text:
        await safe_edit_message(callback, "–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
    builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
    builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
    
    await safe_edit_message(callback, f"–í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{post_text}\n\n–§–æ—Ç–æ: {len(photos)} —à—Ç.\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=builder.as_markup())
    
    await state.set_state(PostStates.ready_to_publish)

@dp.callback_query(F.data == "add_more_photos")
async def add_more_photos_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await safe_edit_message(callback, "–ü—Ä–æ–¥–æ–ª–∂–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.")

@dp.callback_query(F.data == "publish_now")
async def publish_now_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await safe_edit_message(callback, "–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏ —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    post_text = data.get('generated_post')
    photos = data.get('photos', [])
    
    if not post_text:
        await safe_edit_message(callback, "–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
    if len(post_text) > 3000:
        post_text = post_text[:2997] + "..."

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤ Telegram (10) –∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    max_photos_for_telegram = min(10, config.MAX_PHOTOS_PER_POST)
    if photos and len(photos) > max_photos_for_telegram:
        photos = photos[:max_photos_for_telegram]
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –¥–ª—è Telegram
    media_group = []
    if photos:
        media_group = [InputMediaPhoto(media=file_id) for file_id in photos]
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤ Telegram –∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        media_group = media_group[:max_photos_for_telegram]
    
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é —Å–µ–º–∞—Ñ–æ—Ä–∞
        async with publish_semaphore:
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram –∏ VK –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram –∏ VK –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º return_exceptions=True
            telegram_result, vk_result = await asyncio.gather(
                publish_telegram_post(bot, post_text, media_group),
                publish_vk_post(bot, post_text, photos),
                return_exceptions=True # –≠—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, —É–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        # –§—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True, False, None –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        # None –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        telegram_success = telegram_result is True or telegram_result is None or (telegram_result is not False and not isinstance(telegram_result, Exception))
        vk_success = vk_result is True or vk_result is None or (vk_result is not False and not isinstance(vk_result, Exception))
        
        # –ï—Å–ª–∏ VK –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É
        if not vk_success:
            error_msg = "‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ VK. "
            if isinstance(vk_result, Exception):
                error_msg += f"–û—à–∏–±–∫–∞: {str(vk_result)}"
                # –õ–æ–≥–∏—Ä—É–µ–º traceback –æ—à–∏–±–∫–∏ VK –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.error(f"VK publication error: {vk_result}", exc_info=True)
            else:
                error_msg += "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram
            try:
                await bot.send_message(
                    config.ADMIN_ID,
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK:\n\n{error_msg}\n\n–ü–æ—Å—Ç –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –≤ Telegram –∫–∞–Ω–∞–ª–µ."
                )
            except Exception as notify_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ VK –∞–¥–º–∏–Ω—É: {notify_error}")
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ VK
            logger.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ VK")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await state.clear()
        
        # –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ Python —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å—é
        # del post_text
        # del photos
        # if media_group:
        #     media_group.clear()
        # del media_group
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        # –£—Ç–æ—á–Ω—è–µ–º –ª–æ–≥–∏–∫—É: –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ False –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
        if telegram_success and vk_success:
            result_message = "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram –∏ VK!"
        elif telegram_success:
            result_message = "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram.\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ VK (–∞–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω)."
        elif vk_success:
            result_message = "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ VK.\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Telegram."
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≤–æ–æ–±—â–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if telegram_result is None and vk_result is None:
                result_message = "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
            else:
                result_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∏ –≤ Telegram, –Ω–∏ –≤ VK."
        
        await safe_edit_message(callback, result_message)
        
    except Exception as e:
        logger.error(f"Error during publishing: {e}", exc_info=False) # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await safe_edit_message(callback, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await state.clear()
        # –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ Python —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å—é
        # if 'post_text' in locals():
        #     del post_text
        # if 'photos' in locals():
        #     del photos
        # if 'media_group' in locals():
        #     if media_group:
        #         media_group.clear()
        #     del media_group

# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä publish_handler, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ publish_now_handler

@dp.callback_query(F.data == "edit_post_text")
async def edit_post_text_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
    data = await state.get_data()
    post_text = data.get('generated_post', '')
    
    if not post_text:
        await safe_edit_message(callback, "–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(PostStates.editing_post)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    message = f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n{post_text}\n\n–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="skip_editing")
    await safe_edit_message(callback, message, builder.as_markup())


@dp.message(PostStates.editing_post, F.text)
async def process_edited_text(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    edited_text = message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(generated_post=edited_text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    photos = data.get('photos', [])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await state.set_state(PostStates.ready_to_publish)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
    builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
    builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
    
    await message.answer(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{edited_text}\n\n–§–æ—Ç–æ: {len(photos)} —à—Ç.\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ?", reply_markup=builder.as_markup())


@dp.callback_query(F.data == "skip_editing")
async def skip_editing_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    post_text = data.get('generated_post', '')
    photos = data.get('photos', [])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await state.set_state(PostStates.ready_to_publish)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
    builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
    builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
    
    await safe_edit_message(callback, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n\n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{post_text}\n\n–§–æ—Ç–æ: {len(photos)} —à—Ç.\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", builder.as_markup())


@dp.callback_query(F.data == "regenerate_post_topic")
async def regenerate_topic_post_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    topic = data.get('topic', '')
    
    if not topic:
        await safe_edit_message(callback, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")
        return
    
    await safe_edit_message(callback, f"üí≠ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{topic}'...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω, –∞–¥–∞–ø—Ç–∏—Ä—É—è –µ–≥–æ –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É
    season = get_current_season() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞
    template_text = (
        f"–¢—ã ‚Äî –í–∞–ª–µ—Ä–∏—è, –º–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ –∏ –ø–µ–¥–∏–∫—é—Ä–∞ –∏–∑ –°–∞–º–∞—Ä—ã. –¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∂–∏–≤–æ–π –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π. "
        f"–ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: '{topic}'. "
        f"–£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è –≥–æ–¥–∞: —Å–µ–π—á–∞—Å {season}. "
        f"–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–¥—Ä—É–≥–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π 1-2 —É–º–µ—Å—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üíñ, ‚ú®, üíÖ, üî•). "
        f"–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ engaging. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∫—É—Ä—Å–∏–≤). "
        f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî –æ–∫–æ–ª–æ 300-500 —Å–∏–º–≤–æ–ª–æ–≤."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
    post_text = await generate_post_text(template_text, "manicure_pedicure")
    
    if post_text:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(generated_post=post_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post_topic")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_post_text")
        
        await safe_edit_message(callback, f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{topic}':\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.callback_query(F.data == "reset")
async def reset_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await safe_edit_message(callback, "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_start_keyboard())

def get_start_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(text="ü™Ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="generate_post")
    builder.button(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É", callback_data="generate_topic_post")
    builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
    builder.button(text="üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate_post")
    builder.button(text="üîÑ –°–±—Ä–æ—Å", callback_data="reset")
    # builder.button(text="üíÖ –ü–µ–¥–∏–∫—é—Ä", callback_data="generate_pedicure_post")  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –∫–Ω–æ–ø–∫—É
    builder.adjust(2, 2, 2, 1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥, –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    return builder.as_markup()

import signal

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
# running = True  # –£–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

def signal_handler(signum, frame):
    # global running  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    logger.info("Received interrupt signal. Shutting down gracefully...")
    # running = False  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

async def main():
    logger.info("Starting bot...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Docker
    # –í–∞–∂–Ω–æ: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    try:
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            timeout=30,
            drop_pending_updates=True,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            handle_signals=False  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏
        )
    except Exception as e:
        logger.error(f"Error during polling: {e}", exc_info=False)
    finally:
        await bot.session.close()
        logger.info("Bot stopped.")
     
     # # –ó–∞–ø—É—Å–∫ —Å webhook (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å HTTPS)
     # from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
     # from aiohttp import web
     #
     # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
     # WEBHOOK_PATH = '/webhook'
     # # –ù–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω —Å HTTPS
     # WEBHOOK_URL = f'https://your_domain.com{WEBHOOK_PATH}'
     #
     # # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
     # await bot.set_webhook(
     #     url=WEBHOOK_URL,
     #     drop_pending_updates=True,
     #     allowed_updates=dp.resolve_used_update_types(),
     # )
     #
     # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     # app = web.Application()
     # SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
     # setup_application(app, dp, bot=bot)
     #
     # # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
     # runner = web.AppRunner(app)
     # await runner.setup()
     # site = web.TCPSite(runner, 'localhost', 8080) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8080
     # await site.start()
     #
     # # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
     # await asyncio.Event().wait()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    asyncio.run(main(), debug=False)