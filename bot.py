import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InaccessibleMessage
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
from content_generator import generate_post_text
from publisher import publish_telegram_post, publish_vk_post

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)  # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=config.TELEGRAM_TOKEN or "",
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    # request_timeout –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ aiogram 3.x
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
publish_semaphore = asyncio.Semaphore(2)

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ - —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PostStates(StatesGroup):
    generating = State()
    waiting_for_photos = State()
    ready_to_publish = State()

# –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥
# –í–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫, –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: Message):
    if message.from_user and str(message.from_user.id) != str(config.ADMIN_ID):
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="ü™Ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="generate_post")
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø SMM-–ø–æ–º–æ—â–Ω–∏–∫ –í–∞–ª–µ—Ä–∏–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∞ –Ω–µ InaccessibleMessage)
        if callback.message and not isinstance(callback.message, InaccessibleMessage) and getattr(callback.message, "message_id", None):
            await callback.message.edit_text(text, reply_markup=reply_markup)
        else:
            await callback.answer(text[:199] if len(text) > 199 else text, show_alert=True) # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–ª—è show_alert
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)[:199] if len(str(e)) > 199 else str(e)}", show_alert=True)
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        logger.error(f"Error in safe_edit_message: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
@dp.callback_query(F.data == "generate_post")
async def generate_post_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    if await state.get_state() == PostStates.generating:
        await callback.answer("–ü–æ–¥–æ–∂–¥–∏, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞...")
        return
    await state.set_state(PostStates.generating)
    
    await safe_edit_message(callback, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç...")
    
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
    import random
    template_key = random.choice(list(config.POST_TEMPLATES.keys()))
    template_text = config.POST_TEMPLATES[template_key]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ –∫ —à–∞–±–ª–æ–Ω—É
    prompt_with_contact = f"{template_text}\n\n–í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n\n{config.CONTACT_BLOCK}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
    post_text = await generate_post_text(prompt_with_contact)
    
    if post_text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(generated_post=post_text, photos=[], current_template=template_key)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        
        await safe_edit_message(callback, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –ø–æ—Å—Ç–æ–≤
def get_post_type_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ö—Ä–∞—Å–∏–≤–∞—è —Ä–∞–±–æ—Ç–∞", callback_data="template_beautiful_work")
    builder.button(text="–õ–∞–π—Ñ—Å—Ç–∞–π–ª", callback_data="template_lifestyle")
    builder.button(text="–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ—Å—Ç", callback_data="template_useful_post")
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
@dp.callback_query(F.data.startswith("template_"))
async def handle_template_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    if callback.data:
        template_key = callback.data.replace("template_", "")
    else:
        await safe_edit_message(callback, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–∞
    template_text = config.POST_TEMPLATES.get(template_key)
    if not template_text:
        await safe_edit_message(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ –∫ —à–∞–±–ª–æ–Ω—É
    prompt_with_contact = f"{template_text}\n\n–í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n\n{config.CONTACT_BLOCK}"
    
    await safe_edit_message(callback, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
    post_text = await generate_post_text(prompt_with_contact)
    
    if post_text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(generated_post=post_text, photos=[], current_template=template_key)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        
        await safe_edit_message(callback, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(F.data == "regenerate_post")
async def regenerate_post_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_template = data.get('current_template', 'beautiful_work')
    template_text = config.POST_TEMPLATES.get(current_template)
    if not template_text:
        await safe_edit_message(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ –∫ —à–∞–±–ª–æ–Ω—É
    prompt_with_contact = f"{template_text}\n\n–í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n\n{config.CONTACT_BLOCK}"
    
    await safe_edit_message(callback, "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
    post_text = await generate_post_text(prompt_with_contact)
    
    if post_text:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(generated_post=post_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
        builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
        builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
        
        await safe_edit_message(callback, f"–ù–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{post_text}", reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(F.data == "add_photo")
async def add_photo_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await safe_edit_message(callback, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).")
    await state.set_state(PostStates.waiting_for_photos)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@dp.message(PostStates.waiting_for_photos, F.photo)
async def photo_handler(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photos = data.get('photos', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    if len(photos) >= config.MAX_PHOTOS_PER_POST:
        await message.answer(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ: {config.MAX_PHOTOS_PER_POST}")
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ 10 –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ)
    if len(photos) > 10:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –ø–æ—Å—Ç–µ: 10")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    if message.photo:
        photo_id = message.photo[-1].file_id
        file_info = await bot.get_file(photo_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, –≤ –±–∞–π—Ç–∞—Ö)
        if file_info.file_size and file_info.file_size > config.MAX_PHOTO_SIZE_MB * 1024 * 1024:
            await message.answer(f"–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_PHOTO_SIZE_MB} –ú–ë")
            return
        
        photos.append(photo_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        del file_info
    else:
        await message.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Ñ–æ—Ç–æ
    await state.update_data(photos=photos)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ, –≤—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", callback_data="photos_done")
    builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="add_more_photos")
    
    await message.answer(
        f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "photos_done")
async def photos_done_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –∏ —Ñ–æ—Ç–æ
    data = await state.get_data()
    post_text = data.get('generated_post')
    photos = data.get('photos', [])
    
    if not post_text:
        await safe_edit_message(callback, "–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
    builder.button(text="üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate_post")
    builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
    
    await safe_edit_message(callback, f"–í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{post_text}\n\n–§–æ—Ç–æ: {len(photos)} —à—Ç.\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=builder.as_markup())
    
    await state.set_state(PostStates.ready_to_publish)

@dp.callback_query(F.data == "add_more_photos")
async def add_more_photos_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await safe_edit_message(callback, "–ü—Ä–æ–¥–æ–ª–∂–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.")

@dp.callback_query(F.data == "publish_now")
async def publish_now_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await safe_edit_message(callback, "–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏ —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    post_text = data.get('generated_post')
    photos = data.get('photos', [])
    
    if not post_text:
        await safe_edit_message(callback, "–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
    if len(post_text) > 3000:
        post_text = post_text[:2997] + "..."

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ 10 –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ)
    if photos and len(photos) > 10:
        photos = photos[:10]
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –¥–ª—è Telegram
    media_group = []
    if photos:
        media_group = [InputMediaPhoto(media=file_id) for file_id in photos]
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ –¥–æ 10
        media_group = media_group[:10]
    
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é —Å–µ–º–∞—Ñ–æ—Ä–∞
        async with publish_semaphore:
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram –∏ VK –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                publish_telegram_post(bot, post_text, media_group),
                publish_vk_post(bot, post_text, photos)
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await state.clear()
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        del post_text
        del photos
        if media_group:
            media_group.clear()
        del media_group
        
        
        await safe_edit_message(callback, "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram –∏ VK!")
        
    except Exception as e:
        logger.error(f"Error during publishing: {e}", exc_info=False) # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await safe_edit_message(callback, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await state.clear()
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if 'post_text' in locals():
            del post_text
        if 'photos' in locals():
            del photos
        if 'media_group' in locals():
            if media_group:
                media_group.clear()
            del media_group

# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä publish_handler, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ publish_now_handler

@dp.callback_query(F.data == "reset")
async def reset_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await safe_edit_message(callback, "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_start_keyboard())

def get_start_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="ü™Ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="generate_post")
    builder.button(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now")
    builder.button(text="üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate_post")
    builder.button(text="üîÑ –°–±—Ä–æ—Å", callback_data="reset")
    return builder.as_markup()

async def main():
    logger.info("Starting bot...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Docker
    # –í–∞–∂–Ω–æ: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await dp.start_polling(
        bot,
        allowed_updates=dp.resolve_used_update_types(),
        timeout=30,
        drop_pending_updates=True  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    )
    
    # # –ó–∞–ø—É—Å–∫ —Å webhook (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å HTTPS)
    # from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
    # from aiohttp import web
    #
    # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    # WEBHOOK_PATH = '/webhook'
    # # –ù–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω —Å HTTPS
    # WEBHOOK_URL = f'https://your_domain.com{WEBHOOK_PATH}'
    #
    # # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    # await bot.set_webhook(
    #     url=WEBHOOK_URL,
    #     drop_pending_updates=True,
    #     allowed_updates=dp.resolve_used_update_types(),
    # )
    #
    # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # app = web.Application()
    # SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    # setup_application(app, dp, bot=bot)
    #
    # # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    # runner = web.AppRunner(app)
    # await runner.setup()
    # site = web.TCPSite(runner, 'localhost', 8080) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8080
    # await site.start()
    #
    # # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    # await asyncio.Event().wait()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    asyncio.run(main(), debug=False)